// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package main

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en": &dictionary{index: enIndex, data: enData},
		"ru": &dictionary{index: ruIndex, data: ruData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"Content":              1,
	"Name":                 0,
	"Published after":      3,
	"Published exactly at": 2,
	"Send":                 5,
	"Tags":                 4,
}

var enIndex = []uint32{ // 7 elements
	0x00000000, 0x00000005, 0x0000000d, 0x00000022,
	0x00000032, 0x00000037, 0x0000003c,
} // Size: 52 bytes

const enData string = "" + // Size: 60 bytes
	"\x02Name\x02Content\x02Published exactly at\x02Published after\x02Tags" +
	"\x02Send"

var ruIndex = []uint32{ // 7 elements
	0x00000000, 0x00000011, 0x00000026, 0x0000004d,
	0x00000071, 0x0000007a, 0x0000008d,
} // Size: 52 bytes

const ruData string = "" + // Size: 141 bytes
	"\x02Название\x02Содержимое\x02Опубликовать точно в\x02Опубликовать через" +
	"\x02Тэги\x02Отправить"

	// Total table size 305 bytes (0KiB); checksum: 8DEE5E28
